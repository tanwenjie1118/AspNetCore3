<!--
  autoReload="true"表示在不重新启动应用程序的情况下，修改配置文件，NLog会自动重新加载配置文件；
  internalLogLevel="Trace" 表示输出内部日志的级别 Trace|Debug|Info|Warn|Error|Fatal 级别越高，日志越少。设置为Off则为关闭
  internalLogFile="nlog-internal.log"这个设置可以将NLog内部的日志消息写到指定文件中，这个文件将位于程序根目录下；（这个配置常用于调试Nlog的配置是否正确，调试完成后，最好关闭以提高性能）
   -->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      autoReload="true"
      internalLogLevel="Off"
      internalLogFile="nlog-internal.log">

  <!-- 配置自定义变量 以下是官方文档
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  https://github.com/NLog/NLog/wiki/Var-Layout-Renderer
  -->

  <variable name="logDirectory" value="${basedir}/logs"/>

  <targets>
    <!--
    name="Trace" 给这一项target配置指定一个名称，在rules里面配置调用该名称
    xsi:type="File" 表示以何种形式存储日志
      File 文本文件形式（https://www.cnblogs.com/RitchieChen/archive/2012/07/16/2594308.html）
          archiveAboveSize – 存档上限值。当日志文件大于此值是，将自动存档。其类型为Long。注意：在多进程并发记录日志的情况下，启用该选项可能会大幅降低日志记录速度。在单进程时，为了达到最佳性能，可以考虑设置ConcurrentWrites为false。
          maxArchiveFiles – 保存的最大存档文件数。其类型类Integer，默认为9个。
          archiveFileName – 存档文件名称。允许使用Layout。备注：此文件名称中可能包含特殊占位符{#####}，它将根据存档策略，由一个数字序列替代，其中占位符的个数决定了文件名称中的数字。
          archiveNumbering – 存档文件的编号方式。Rolling – 滚动式编号，即最新的日志文件编号为0，然后是1，… ，N。Sequence – 序列式编号，即最大编号的日志文件为最新的日志文件。
 
      ElasticSearch（https://www.cnblogs.com/wintersun/archive/2015/08/23/4753145.html）
      Database（https://github.com/nlog/NLog/wiki/Database-target）
      Mail（https://github.com/nlog/NLog/wiki/Mail-target）
      WebService（https://github.com/nlog/NLog/wiki/WebService-target）
      Amazon SNS（Amazon SNS https://github.com/Takaloy/NLog.Targets.SNS）
      Amazon SQS（Amazon SQS https://github.com/aireq/NLog.Targets.SQS）
     
    layout 配置日志内容的格式，常用的系统变量有
      ${longdate} 当前时间
      ${processid} 进程ID
      ${stacktrace} 堆栈信息
      ${callsite} 调用方法
      ${level} 日志级别 依次是Trace<Debug<Info<Warn<Error<Fatal
      ${message} 自定义错误信息
      更多请参考 https://github.com/nlog/nlog/wiki/Layout-Renderers）
    
    -->
    <target name="targetTrace" xsi:type="File"
            fileName="${logDirectory}/${level}/${level}.${shortdate}.log"
            archiveAboveSize ="31457280"
            maxArchiveFiles ="100"
            archiveFileName ="${logDirectory}/${level}/${level}.${shortdate}.{###}.log"
            archiveNumbering ="Rolling"
            layout="[${longdate}][${level}]${message}##END##"/>

    <target name="targetConsole" xsi:type="Console"
            layout="[${longdate}][${level}]${message}##END##"/>
  </targets>

  <!--<target name="targetDebug" xsi:type="File" fileName="${logDirectory}/${level}/${shortdate}${level}.log"/>
    <target name="targetInfo" xsi:type="File" fileName="${logDirectory}/Info.log"/>
    <target name="targetWarn" xsi:type="File" fileName="${logDirectory}/Warn.log"/>
    <target name="targetError" xsi:type="File" fileName="${logDirectory}/Error.log"/>
    <target name="targetFatal" xsi:type="File" fileName="${logDirectory}/Fatal.log" layout="${longdate} ${processid}-${processinfo}-${stacktrace}-${callsite} ${level} ${message}" /> />-->
  <rules>
    <!--
    https://github.com/NLog/NLog/wiki/Configuration-file#rules
   
    日志范围配置
    name="*" 记录所有范围的日志
    name="Name.Space.*" 只记录指定命名空间下所有类的日志
    name="Name.Space.Class1" 只记录指定命名空间指定类的日志
   
    日志级别配置
    level="Debug" 只记录Debug级别的日志
    levels="Debug,Error" 只记录Debug和Error级别的日志
    minlevel="Debug" 记录日志的最小级别为Debug，所以Trace日志不会被记录
    maxlevel="Error" 记录日志的最大级别为Error，所以Fatal日志不会被记录
   
    指定Target
    writeTo="targetTrace" 使用target name = "targetTrace" 的配置来存储日志，可以多个targetname逗号隔开表示使用多个存储
    -->

    <!-- Microsoft 的日志只记录Error 和 Fatal 级别的，其他级别的日志都不记录-->
    <!--<logger name="Microsoft.*" maxlevel="Warn" final="true" />-->
    <logger name="*" writeTo="targetTrace,targetConsole" />
  </rules>
</nlog>